/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const port = 3000;
const fs = require("fs");
app.use(bodyParser.json());
const fileName = "todos.json";

function findToDo(arr, index) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].id === index) return i;
  }
  return -1;
}

app.get("/todos", (req, res) => {
  fs.readFile(fileName, "utf-8", (err, data) => {
    if (err) {
      console.log("Error in reading File");
    }
    res.send(JSON.parse(data));
  });
});

app.post("/todos", (req, res) => {
  const newTodo = {
    id: Math.floor(Math.random() * 978123 + 1),
    title: req.body.title,
    description: req.body.description,
  };
  fs.readFile(fileName, "utf-8", (err, data) => {
    if (err) {
      console.log("Error in reading File");
    }
    const dataToArray = JSON.parse(data); //Convert the JSON into Array
    dataToArray.push(newTodo); //Pushing to Array
    const arrayToData = JSON.stringify(dataToArray);
    fs.writeFile(fileName, arrayToData, (err) => {
      if (err) {
        throw err;
      }
      res.status(201).json(newTodo);
    });
  });
});

app.post("/todos/:id", (req, res) => {
  fs.readFile(fileName, "utf-8", (err, data) => {
    if (err) throw err;
    const toDos = JSON.parse(data); //convert JSON to array
    const indexToDo = findToDo(toDos,parseInt(req.params.id)); //Finding if the index is present
    if (indexToDo===-1) {
      res.status(404).send();
    }else {
      res.json(toDos[indexToDo]);
    }
  });
});


app.delete("/todos/:id", (req, res) => {
  fs.readFile(fileName, "utf-8", (err, data) => {
    if (err) throw err;
    const toDos = JSON.parse(data);
    const indexToDo = findToDo(toDos,parseInt(req.params.id));
    if (indexToDo===-1) {
      res.status(404).send();
    }else {
      toDos.splice(indexToDo,1); //Deleting the array
      fs.writeFile(fileName,JSON.stringify(toDos), (err)=>{
        if (err) throw err;
        res.status(200).send();
      })
    }
  });
});


app.put("/todos:id", (req, res) => {
  fs.readFile(fileName, "utf-8", (err, data) => {
    if (err) {
      console.log("Error in reading File");
    }
    const toDos = JSON.parse(data);
    const indexToDo = findToDo(toDos,parseInt(req.params.id));
    if (indexToDo===-1) {
      res.status(404).send();
    }else {
      const updatedTodo = {
        id:toDos[indexToDo].id,
        title:req.body.title,
        description:req.body.description
      }
      todos[indexToDo]=updatedTodo
      fs.writeFile(fileName,JSON.stringify(toDos), (err)=>{
        if (err) throw err;
        res.status(200).send(updatedTodo);
      })
    }
  });
});

app.use((req, res, next) => {
  res.status(404).send();
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

module.exports = app;
